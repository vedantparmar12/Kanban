version: '3.8'

services:
  neo4j:
    image: neo4j:5.15-community
    container_name: kanban_neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: 'apoc.*'
      NEO4J_dbms_security_procedures_allowlist: 'apoc.*'
    ports:
      - "7474:7474"  # Neo4j Browser
      - "7687:7687"  # Bolt protocol
    networks:
      - kanban_network
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD:-password} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: kanban_redis
    ports:
      - "6379:6379"
    networks:
      - kanban_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: kanban_backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379
      MCP_SERVER_URL: http://mcp-server:8000
      MCP_API_KEY: ${MCP_API_KEY:-mcp-secret-key}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
    depends_on:
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_started
    ports:
      - "3000:3000"
    networks:
      - kanban_network
    

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: kanban_frontend
    environment:
      VITE_API_URL: http://localhost:3000
      VITE_WS_URL: ws://localhost:3000
    depends_on:
      - backend
    ports:
      - "5173:5173"
    networks:
      - kanban_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: ../docker/Dockerfile.mcp
    container_name: kanban_mcp
    environment:
      # GitHub Configuration
      GITHUB_TOKEN: ${GITHUB_TOKEN}

      # LLM Configuration
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENROUTER_BASE_URL: ${OPENROUTER_BASE_URL}
      OPENROUTER_SITE_URL: ${OPENROUTER_SITE_URL}
      OPENAI_MODEL: ${OPENAI_MODEL}

      # MCP Configuration
      MCP_API_KEY: ${MCP_API_KEY:-mcp-secret-key}

      # Neo4j Configuration
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}

      # Kanban API Configuration
      KANBAN_API_URL: http://backend:3000/api
      KANBAN_API_TOKEN: ${KANBAN_API_TOKEN:-kanban-api-token}

      # Application Configuration
      REPO_PATH: /app/repos
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8000
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./repos:/app/repos
      - ./mcp-server:/app
      - /app/node_modules
    ports:
      - "8000:8000"
    networks:
      - kanban_network

  nginx:
    image: nginx:alpine
    container_name: kanban_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - kanban_network

volumes:
  neo4j_data:
  neo4j_logs:

networks:
  kanban_network:
    driver: bridge